#ifndef INCLUDED_LUX_INPUT_EVENT_H
#define INCLUDED_LUX_INPUT_EVENT_H
#include "input/Keycodes.h"
#include "core/lxEvent.h"

namespace lux
{
namespace input
{

class InputDevice;

class Event : public core::Event
{
public:
	InputDevice* device; //!< The input device which send the message.

	template <typename T>
	bool Is() const
	{
		static_assert(std::is_base_of<Event, T>::value, "T must be derived of input::Event");
		return dynamic_cast<const T*>(this) != nullptr;
	}

	template <typename T>
	T& As()
	{
		static_assert(std::is_base_of<Event, T>::value, "T must be derived of input::Event");
		auto ptr = dynamic_cast<T*>(this);
		if(!ptr)
			throw core::InvalidCastException();
		return *ptr;
	}

	template <typename T>
	const T& As() const
	{
		static_assert(std::is_base_of<Event, T>::value, "T must be derived of input::Event");
		auto ptr = dynamic_cast<const T*>(this);
		if(!ptr)
			throw core::InvalidCastException();
		return *ptr;
	}

	template <typename T>
	T* TryAs()
	{
		static_assert(std::is_base_of<Event, T>::value, "T must be derived of input::Event");
		return dynamic_cast<T*>(this);
	}

	template <typename T>
	const T* TryAs() const
	{
		static_assert(std::is_base_of<Event, T>::value, "T must be derived of input::Event");
		return dynamic_cast<const T*>(this);
	}
};

class ButtonEvent : public Event
{
public:
	int code;      //!< The element id of the changed button.
	bool pressedDown;   //!< Was the button pressed(True) or released(False)
};

class KeyboardButtonEvent : public ButtonEvent
{
public:
	// TODO: Convert to UTF8 instead of codepoints.
	u32 character[4]; //!< The charcter generated by pressing the last button
};

class AxisEvent : public Event
{
public:
	int code;
	float rel;
	float abs;
};

class AreaEvent : public Event
{
public:
	int code;
	math::Vector2F rel;
	math::Vector2F abs;
};

class EventHandler
{
public:
	virtual ~EventHandler() {}
	LUX_API virtual void OnEvent(const input::Event& e);

	virtual void OnLButton(bool isDown, const input::Event& event) { LUX_UNUSED(isDown); LUX_UNUSED(event); }
	virtual void OnRButton(bool isDown, const input::Event& event) { LUX_UNUSED(isDown); LUX_UNUSED(event); }
	virtual void OnMouseMove(const math::Vector2F& move, const input::Event& event) { LUX_UNUSED(move); LUX_UNUSED(event); }
	virtual void OnMouseWheel(float move, const input::Event& event) { LUX_UNUSED(move); LUX_UNUSED(event); }

	virtual void OnKey(bool isDown, int key, const input::Event& event) { LUX_UNUSED(isDown); LUX_UNUSED(key); LUX_UNUSED(event); }
};

} // namespace input
} // namespace lux


#endif