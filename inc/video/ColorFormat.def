// #define X(name, alpha_mask, red_mask, green_mask, blue_mask, type, size)
// type: 0=other, 1=integer, 2=float, 3=compressed

//24-Bit
X(R8G8B8, 0, 0xFF0000, 0x00FF00, 0x0000FF, 1, 24)

//32-Bit
X(X8R8G8B8,    0x00000000, 0x00FF0000, 0x0000FF00, 0x000000FF, 1, 32)
X(A8R8G8B8,    0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF, 1, 32)
X(G16R16,      0x00000000, 0x0000FFFF, 0xFFFF0000, 0x00000000, 1, 32)
X(A2R10G10B10, 0xC0000000, 0x3FF00000, 0x000FFC00, 0x000003FF, 1, 32)

// 16-Bit
X(X1R5G5B5, 0x0000, 0x7C00, 0x03E0, 0x001F, 1, 16)
X(A1R5G5B5, 0x8000, 0x7C00, 0x03E0, 0x001F, 1, 16)
X(R5G6B5,   0x0000, 0xF800, 0x07E0, 0x001F, 1, 16)
X(X16,      0x0000, 0x0000, 0x0000, 0x0000, 1, 16)

// 8-Bit
X(X8, 0x00, 0x00, 0x00, 0x00, 1, 8)

// Floating Point Formats
X(R16F, 0, 0, 0, 0, 2, 16)
X(G16R16F, 0, 0, 0, 0, 2, 32)
X(R32F,    0, 0, 0, 0, 2, 32)
X(A16B16G16R16F, 0, 0, 0, 0, 2, 64)
X(G32R32F,       0, 0, 0, 0, 2, 64)
X(A32B32G32R32F, 0, 0, 0, 0, 2, 128)

// Compressed formats
X(DXT1, 0, 0, 0, 0, 3, 4)
X(DXT3, 0, 0, 0, 0, 3, 8)
X(DXT5, 0, 0, 0, 0, 3, 8)

X(UNKNOWN, 0, 0, 0, 0, 0, 0)